1.  Start Game with welcome message and Adventure inventory

2.  Instantiate Player 

3.  Create List for all Rooms

4.  Load Room 1
        Add to list

5.  Enter Room 1
        Present Room
        Fight
        Set Room state to "No Enemy"
        What do you want to do
            Loot
            Go to
                If door
                    What do you want to do?
                If wall
                    Present message
                    What do you want to do?
                If corridor
                    Go to 
                    Exit Room
6.  Load next Room
        Add to list

7.  Enter Room 2
        Do same as in Room 1


Running from a fight will always reset player to Room 0.

// It would be cool to track which room we are in and automatically
// enter the appropriate room.
    // We could implement a boolean in class Room, that does that for us.
    // If boolean "active" == true -> Player is currently in this room.
    // If boolean "active" == false -> Player is not in this room.
    // Entering and exiting a room would then be setting active to
    // true or false.
    // We could then use a while loop (player.hp > 0) to loop through
    // the list of all rooms and always enter, present and fight in
    // the room where active == true.

// How do we switch rooms? How will Main know, which room to set as active 
// next? 
// AllRooms stores all the Rooms. 
// We can then use a simple if statement that checks agains "Room.Active"
// and then does the "AllRooms[x].EnterRoom()" function.

// Why is LoadRoomX a static? 
    Because, we want a new room each time.
    We could instead use a non static function and create one room in main,
    which we then modify by calling LoadRoomX. Butthat would result in the
    same room getting overwritten. 
    But we might need to reenter a room we already have been to.
    All the Changes would be lost then.

// TODO 
    RoomMessage : Message 
    Messages are not actually working because Ask.WhatToDo returns 
    string choice and not string whatToDo. 
    // How do we fix that? 
        ->  We do 
            Ask.WtdDoor();
            Ask.WtdPassage();
            Ask.WtdWall();
    // We need to add these.

    // Make Method for Go to direction and opening door.

    // Ask.WhatToDo needs to check where we are (in front of door, etc)
        and then modify the displayed message. 
        // Maybe add a state inside of RoomBoundary that tracks, 
        if the player is in front of this door.
        AND
        Link the state with Walls.[this].Type:

        string whatToDo;
        foreach (Wall in Walls)
        {
            if Wall.State == active
            {
                if Wall.Type == WallType.Door
                {
                    whatToDo = "whatToDo" + 
                    add door specific options to WhatToDo
                }
                else if Wall.Type == WallType.Wall
                {
                    whatToDo = "whatToDo" + 
                    add wall specific options to WhatToDo
                }
                else if Wall.Type == WallType.WtdPassage
                {
                    whatToDo = "whatToDo" + 
                    add Passage specific options to WhatToDo
                }
            }
            else 
            {
                normal "WhatToDo"
            }
        }

        string choice;
        do
        {
            choice = Console.ReadLIne()!;
        }
        while (string.IsNullOrEmpty(choice));

        return choice;

